version: 2.1

commands:
  build-libs:
    steps:
      - restore_cache:
          name: Restore libs cache
          keys:
            - libs-cache-v2-{{ arch }}-{{ checksum "libs/build-all.sh" }}-{{ checksum "libs/build-openssl-desktop.sh" }}-{{ checksum "libs/build-sqlcipher-desktop.sh" }}
      - run:
          name: Build libs
          command: |
            sudo apt-get install tcl
            pushd libs && ./build-all.sh desktop && popd
            echo 'export OPENSSL_DIR=$(pwd)/libs/desktop/linux-x86-64/openssl' >> $BASH_ENV
            echo 'export SQLCIPHER_LIB_DIR=$(pwd)/libs/desktop/linux-x86-64/sqlcipher/lib' >> $BASH_ENV
            echo 'export SQLCIPHER_INCLUDE_DIR=$(pwd)/libs/desktop/linux-x86-64/sqlcipher/include' >> $BASH_ENV
      - save_cache:
          name: Save libs cache
          key: libs-cache-v2-{{ arch }}-{{ checksum "libs/build-all.sh" }}-{{ checksum "libs/build-openssl-desktop.sh" }}-{{ checksum "libs/build-sqlcipher-desktop.sh" }}
          paths:
            - libs/desktop
  test-setup:
    parameters:
      rust-version:
        type: string
        default: "stable"
    steps:
      - checkout
      - build-libs
      - run:
          name: Rust setup
          command: |
            rustup install <<parameters.rust-version>>
            rustup default <<parameters.rust-version>>
            rustc --version
  rust-tests:
    parameters:
      rust-version:
        type: string
        default: "stable"
    steps:
      - test-setup:
          rust-version: <<parameters.rust-version>>
      # Test with 1. only default features on, 2. all features on, 3. no features on.
      # This is not perfect (really we want the cartesian product), but is good enough in practice.
      - run:
          name: Test
          command: cargo test --all --verbose
      - run:
          name: Test (all features)
          command: cargo test --all --all-features --verbose
      - run:
          name: Test (no default features)
          command: cargo test --all --no-default-features --verbose
  sync-tests:
    steps:
      - test-setup
      - run:
          name: Install Node.js
          command: |
            curl -sL https://deb.nodesource.com/setup_10.x | sudo -E bash -
            sudo apt-get install -y nodejs
      - run:
          name: Sync Integration Test Suite
          command: cargo run -p sync-test

jobs:
  Check Rust formatting:
    docker:
      - image: circleci/rust:latest
    steps:
      - checkout
      - run: rustup component add rustfmt
      - run: rustfmt --version
      - run: cargo fmt -- --check
  Rust tests - stable:
    docker:
      - image: circleci/rust:latest
    steps:
      - rust-tests
  Rust tests - beta:
    docker:
      - image: circleci/rust:latest
    steps:
      - rust-tests:
          rust-version: "beta"
  Rust tests - nightly:
    docker:
      - image: circleci/rust:latest
    steps:
      - rust-tests:
          rust-version: "nightly"
  Sync integration tests:
    docker:
      - image: circleci/rust:latest-browsers
    steps:
      - sync-tests

workflows:
  version: 2
  check-formating:
    jobs:
      - Check Rust formatting
  run-tests:
    jobs:
      - Rust tests - stable
      - Rust tests - beta
      - Rust tests - nightly
      - Sync integration tests
