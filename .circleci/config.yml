version: 2.1

# ⚠️ If you add, rename or delete a job here, please also update .mergify.yml! ⚠️

commands:
  # Our policy for updating rust versions is at https://github.com/mozilla/application-services/tree/main/docs/rust-versions.md
  # See also rust-toolchain in the root of this repo, which is used to specify our official target version.
  setup-rust-target-version:
    steps:
      # So long as this is executed after the checkout it will use the version specified in rust-toolchain.yaml
      - run: rustup update
  # Our minimum supported rust version is specified here.
  setup-rust-min-version:
    steps:
      # https://searchfox.org/mozilla-central/source/python/mozboot/mozboot/util.py#20
      - run: rustup override set 1.53.0

  full-checkout:
    steps:
      - checkout
      - run:
          name: "Pull git submodules"
          command: git submodule update --init
  setup-sccache:
    steps:
      - run:
          name: Install sccache
          command: |
            SCCACHE_VERSION=v0.2.15
            if [ "$(uname)" == "Darwin" ]; then
              SCCACHE="sccache-${SCCACHE_VERSION}-x86_64-apple-darwin"
            else
              SCCACHE="sccache-${SCCACHE_VERSION}-x86_64-unknown-linux-musl"
            fi
            SCCACHE_ARCHIVE="${SCCACHE}.tar.gz"
            SCCACHE_URL="https://github.com/mozilla/sccache/releases/download/${SCCACHE_VERSION}/${SCCACHE_ARCHIVE}"
            curl -sfSL --retry 5 --retry-delay 10 "${SCCACHE_URL}" | sudo tar -xz --strip-components=1 -C /usr/local/bin/ "${SCCACHE}/sccache"
            sudo chmod +x /usr/local/bin/sccache
            # Do not forget to re-export these variables in xc-universal-binary.sh!
            echo 'export "RUSTC_WRAPPER"="sccache"' >> $BASH_ENV
            echo 'export "SCCACHE_IDLE_TIMEOUT"="1200"' >> $BASH_ENV
            echo 'export "SCCACHE_CACHE_SIZE"="2G"' >> $BASH_ENV
            echo 'export "SCCACHE_ERROR_LOG"="/tmp/sccache.log"' >> $BASH_ENV
            echo 'export "RUST_LOG"="sccache=info"' >> $BASH_ENV
            # Incremental compilation isn't supported by sccache.
            echo 'export "CARGO_INCREMENTAL"="0"' >> $BASH_ENV
      # Run in a different shell to source $BASH_ENV modified above.
      - run: |
          sccache --version
          sccache --zero-stats
  install-grcov:
    steps:
      - run:
          name: Install grcov
          command: |
            cargo install grcov
      # Run in a different shell to source $BASH_ENV
      - run: |
          grcov --version
  install-mdbook:
    steps:
      - run:
          name: Install mdBook
          command: |
            mkdir -p $HOME/.bin
            pushd $HOME/.bin
            curl -sfSL --retry 5 --retry-delay 10 https://github.com/rust-lang-nursery/mdBook/releases/download/v0.2.1/mdbook-v0.2.1-x86_64-unknown-linux-gnu.tar.gz | tar xz
            echo 'export PATH="$HOME/.bin:$PATH"' >> $BASH_ENV
            popd
  install-rust:
    steps:
      - run:
          name: Install Rust
          command: |
            RUSTUP_PLATFORM=x86_64-apple-darwin
            RUSTUP_VERSION=1.24.1
            RUSTUP_SHA256=d53e8000c8663e1704a2071f7042be917bc90cbc89c11e11c5dfdcb35b84c00e
            curl -sfSL --retry 5 --retry-delay 10 -O "https://static.rust-lang.org/rustup/archive/${RUSTUP_VERSION}/${RUSTUP_PLATFORM}/rustup-init"
            echo "${RUSTUP_SHA256} *rustup-init" | shasum -a 256 -c -
            chmod +x rustup-init
            ./rustup-init -y --no-modify-path
            rm rustup-init
            echo 'export PATH="$HOME/.cargo/bin:$PATH"' >> $BASH_ENV
  build-libs:
    parameters:
      platform:
        type: string
    steps:
      - run:
          name: Compute libs/ checksum
          command: echo "$(git rev-parse HEAD:libs)" >| libs_sha
      - restore_cache:
          name: Restore libs/ cache
          key: libs-cache-{{ arch }}-{{ checksum "libs_sha" }}
      - run:
          name: Build libs
          command: pushd libs && ./build-all.sh <<parameters.platform>> && popd
      - save_cache:
          name: Save libs/ cache
          key: libs-cache-{{ arch }}-{{ checksum "libs_sha" }}
          paths:
            - libs/<<parameters.platform>>
  build-desktop-libs:
    steps:
      - run: sudo apt-get update
      - run: sudo apt-get install python tcl
      - run:
          name: Install NSS build system dependencies
          command: sudo apt-get install ninja-build gyp zlib1g-dev
      - build-libs:
          platform: desktop
  build-ios-libs:
    steps:
      - run:
          name: Install NSS build system dependencies
          command: |
            brew install ninja
            pushd ..
            git clone https://chromium.googlesource.com/external/gyp.git
            pushd gyp
            python3 setup.py install
            popd
            popd
      - build-libs:
          platform: ios
  carthage-bootstrap:
    steps:
      - run:
          name: Determine XCode version
          command: echo "$(xcodebuild -version)" >| xcode_version
      - restore_cache:
          name: Restore Carthage/ cache
          key: carthage-dir-cache-{{ arch }}-{{ checksum "xcode_version" }}-{{ checksum "Cartfile.resolved" }}
      - run:
          name: Bootstrap Carthage dependencies
          command: XCODE_XCCONFIG_FILE=`pwd`/xcconfig/xcode-12-fix-carthage-lipo.xcconfig carthage bootstrap --platform iOS --cache-builds
      - save_cache:
          name: Save Carthage/ cache
          key: carthage-dir-cache-{{ arch }}-{{ checksum "xcode_version" }}-{{ checksum "Cartfile.resolved" }}
          paths:
            - Carthage
  test-setup:
    steps:
      - full-checkout
      - build-desktop-libs
      - setup-rust-target-version
      - setup-sccache
      # clipboard crate depends on some x11 libs.
      - run: sudo apt-get install libxcb-shape0-dev libxcb-xfixes0-dev
      - run: |
          echo 'export NSS_STATIC=1' >> $BASH_ENV
          echo 'export NSS_DIR=$(pwd)/libs/desktop/linux-x86-64/nss' >> $BASH_ENV
          echo 'export SQLCIPHER_LIB_DIR=$(pwd)/libs/desktop/linux-x86-64/sqlcipher/lib' >> $BASH_ENV
          echo 'export SQLCIPHER_INCLUDE_DIR=$(pwd)/libs/desktop/linux-x86-64/sqlcipher/include' >> $BASH_ENV
          echo 'export RUST_LOG=trace' >> $BASH_ENV
      - run:
          name: Verify the build environment
          command: ./libs/verify-desktop-environment.sh
  run-tests:
    steps:
      - run: automation/tests.py rust-tests
      - run: automation/tests.py nss-bindings

  dependency-checks:
    steps:
      - run:
          name: Check for security vulnerabilities in dependencies
          command: |
            cargo install cargo-audit
            # Explanation for ignored issues:
            #  * RUSTSEC-2021-0019:  Soundness issues in `xcb`, a clipboard library we only use for examples.
            #                        There is currently no fixed version available.
            #  * RUSTSEC-2020-0159:  A possible Segfault in `chrono`'s `localtime_r' invocation, at the time of this
            #                        patch, there is no fixed versions available, but an issue is filed on chrono: https://github.com/chronotope/chrono/issues/602
            #  * RUSTSEC-2020-0071: Related to the one above, `chrono` pulls in a version of `time` that has the same problem, where invocations of
            #                       `localtime_r` could segfault, our code base doesn't trigger this, there is a PR on chrono that should
            #                       fix this: https://github.com/chronotope/chrono/pull/578
            #                       note that both the Nimbus-SDK and glean use chrono, so if we would like to move away from it, both projects
            #                       need to do that before we can remove the ignores (assuming `chrono` doesn't release a fixed version)
            #  * RUSTSEC-2018-0006: Uncontrolled recursion in `yaml-rust`, which is included by `clap` v2. `clap` itself already updated to a safe
            #                       version of `yaml-rust`, which will be released in `v3` and additionally, 
            #                       reading https://github.com/rustsec/advisory-db/issues/288, this is a false
            #                       positive for clap and based on our dependency tree, we only use `yaml-rust` in `clap`.
            cargo audit --ignore RUSTSEC-2021-0019 --ignore RUSTSEC-2020-0159 --ignore RUSTSEC-2020-0071 --ignore RUSTSEC-2018-0006
      - run:
          name: Check for any unrecorded changes in our dependency trees
          command: |
            pip3 install --require-hashes -r ./tools/requirements.txt
            cargo metadata --locked > /dev/null
            python3 ./tools/dependency_summary.py --check ./DEPENDENCIES.md
            python3 ./tools/dependency_summary.py --all-ios-targets --package megazord_ios --check megazords/ios/DEPENDENCIES.md
            python3 ./tools/dependency_summary.py --all-ios-targets --package ios_rust --check megazords/ios-rust/DEPENDENCIES.md
            python3 ./tools/dependency_summary.py --all-android-targets --package megazord --check megazords/full/DEPENDENCIES.md
            python3 ./tools/dependency_summary.py --all-android-targets --package megazord --format pom --check megazords/full/android/dependency-licenses.xml
  bench-all:
    steps:
      - test-setup
      - run:
          name: Build and Run Benchmarks
          command: cargo bench --all
  restore-sccache-cache:
    steps:
      - restore_cache:
          name: Restore sccache cache
          key: sccache-cache-stable-{{ arch }}-{{ .Environment.CIRCLE_JOB }}
  save-sccache-cache:
    steps:
      - save_cache:
          name: Save sccache cache
          # We use {{ epoch }} to always upload a fresh cache:
          # Of course, restore_cache will not find this exact key,
          # but it will fall back to the closest key (aka the most recent).
          # See https://discuss.circleci.com/t/add-mechanism-to-update-existing-cache-key/9014/13
          key: sccache-cache-stable-{{ arch }}-{{ .Environment.CIRCLE_JOB }}-{{ epoch }}
          paths:
            - "~/.cache/sccache"
      - sccache-stats-and-logs
  sccache-stats-and-logs:
    steps:
      - run: sccache --show-stats
      - store_artifacts:
          path: /tmp/sccache.log
          destination: logs/sccache.log

executors:
  # Where possible we want to run jobs using docker, because it's cheaper.
  # Unfortunately some of our jobs can only run successfully on macos.
  docker:
    docker:
      - image: cimg/rust:1.53.0
  macos:
    macos:
      xcode: 13.1.0
    resource_class: m2.medium

jobs:
  Check Swift formatting:
    executor: macos
    steps:
      - full-checkout
      # swiftlint moved? See https://github.com/Homebrew/discussions/discussions/691
      - run: brew update-reset
      - run: brew install swiftlint swiftformat
      - run: ./automation/tests.py swiftlint
      - run: ./automation/tests.py swiftformat
  Check Rust formatting:
    executor: docker
    resource_class: small
    steps:
      - full-checkout
      - setup-rust-target-version
      - run: ./automation/tests.py rust-fmt
  Lint Rust with clippy:
    executor: docker
    steps:
      - restore-sccache-cache
      - test-setup
      - run: ./automation/tests.py rust-clippy
      - save-sccache-cache
  Generate code coverage:
    executor: docker
    resource_class: large
    steps:
      - test-setup
      - install-grcov
      # Test coverage support in Rust has been evolving rapidly, use nightly
      # in the hope of getting the best support/features on that front.
      - run: RUSTUP_TOOLCHAIN="nightly" bash ./automation/emit_coverage_info.sh
      - run:
          name: Compile coverage
          command: grcov ./target/debug/ -s . -t lcov --llvm --ignore-not-existing --ignore "target/*" --ignore "/*" -o lcov.info
      - run:
          name: Upload to codecov.io
          command: ./automation/upload-to-codecov.sh
  Check Protobuf files are up-to-date:
    executor: docker
    resource_class: small
    steps:
      - full-checkout
      - run: ./automation/check_protobuf_files_current.py
  Lint Bash scripts:
    docker:
      - image: koalaman/shellcheck-alpine:stable
    resource_class: small
    steps:
      - checkout
      - run:
          name: Lint Bash scripts with shellcheck
          command: sh automation/lint_bash_scripts.sh
  Check Rust dependencies:
    # This check has to be done on a mac, to be able to detect iOS-specific dependencies.
    executor: macos
    steps:
      - install-rust
      - full-checkout
      - setup-rust-target-version
      - dependency-checks
  Rust tests:
    executor: docker
    # We have to use a machine with more RAM for tests so we don't run out of memory.
    resource_class: large
    steps:
      - restore-sccache-cache
      - test-setup
      - run-tests
      - save-sccache-cache
  Rust tests - min supported rust version:
    executor: docker
    # We have to use a machine with more RAM for tests so we don't run out of memory.
    resource_class: large
    steps:
      - restore-sccache-cache
      - test-setup
      - setup-rust-min-version
      # tests.py doesn't support skipping tests, and we need to skip the systests on this rust version.
      # It's not in the default workspace members, so just `cargo test` is OK.
      - run: RUST_LOG=trace cargo test
      - save-sccache-cache
  # These run periodically (driven by cron).
  Rust tests - beta:
    executor: docker
    resource_class: large
    steps:
      - restore-sccache-cache
      - test-setup
      - run: rustup override set beta
      - run-tests
      - save-sccache-cache
  Rust benchmarks:
    executor: docker
    resource_class: large
    steps:
      - restore-sccache-cache
      - bench-all
      - save-sccache-cache
  iOS build and test:
    executor: macos
    steps:
      # We do not use the ssccache cache helper commands as
      # the macOS cache is in a different folder.
      - restore_cache:
          name: Restore sccache cache
          key: sccache-cache-macos-{{ arch }}
      - full-checkout
      - install-rust
      - setup-rust-target-version
      - run:
          name: Toggle brew auto-updates
          command: |
            if [ -z "${CIRCLE_TAG}" ]; then
              # On non-release builds do not update brew (takes ages).
              echo 'export HOMEBREW_NO_AUTO_UPDATE=1' >> $BASH_ENV
            fi
      - setup-sccache
      - build-ios-libs
      - run:
          name: Set up the build environment
          command: |
            # See #4163 - brew will fail because this six.py already exists.
            # This is clearly unsatisfactory, but works, so :shrug
            rm /usr/local/lib/python3.9/site-packages/six.py

            brew install swift-protobuf --force
      - carthage-bootstrap
      - run:
          name: Verify the build environment
          command: ./libs/verify-ios-ci-environment.sh
      - run:
          name: Run XCode tests
          command: ./automation/tests.py ios-tests
      - store_artifacts:
          path: raw_xcodetest.log
          destination: logs/raw_xcodetest.log
      - run:
          name: (Optional) Run firefox-ios tests
          command: |
            # Only run these on PRs.
            if [ -n "${CIRCLE_PULL_REQUEST}" ]; then
              ./automation/maybe_run_fxios_tests.py << pipeline.git.base_revision >>
            fi
      - run:
          name: Build Carthage archive
          no_output_timeout: 20m
          command: |
            if [ -z "${CIRCLE_TAG}" ]; then
              # XCode tests build in Debug configuration, save us a full
              # Rust rebuild in Release mode by forcing Debug mode on
              # non-release builds.
              bash build-carthage.sh --out MozillaAppServices.framework.zip --configuration Debug
            else
              bash build-carthage.sh --out MozillaAppServices.framework.zip
            fi
      - store_artifacts:
          path: raw_xcodebuild.log
          destination: logs/raw_xcodebuild.log
      - run:
          name: Install Rust Nightly
          command: |
            # For now we need the nightly toolchain to build for the M1 simulator.
            rustup install nightly
            # For now we need to build the Rust stdlib from source for the M1 simulator.
            rustup component add rust-src --toolchain nightly-x86_64-apple-darwin
            rustup toolchain add nightly --profile minimal
            rustup target add aarch64-apple-ios-sim --toolchain nightly
      - run:
          name: Build XCFramework archive
          command: |
            bash megazords/ios-rust/build-xcframework.sh --build-profile release
      - save_cache:
          name: Save sccache cache
          key: sccache-cache-macos-{{ arch }}-{{ epoch }}
          paths:
            - "~/Library/Caches/Mozilla.sccache"
      - sccache-stats-and-logs
      - run:
          name: "Create Carthage bin-only project specification"
          command: |
            ZIP_URL=https://circleci.com/api/v1.1/project/github/mozilla/application-services/$CIRCLE_BUILD_NUM/artifacts/0/dist/MozillaAppServices.framework.zip
            echo "{\"0.0.1\":\"$ZIP_URL\"}" > mozilla.app-services.json
      - store_artifacts:
          name: Store Carthage framework in workspace
          path: MozillaAppServices.framework.zip
          destination: dist/MozillaAppServices.framework.zip
      - store_artifacts:
          name: Store Carthage bin-only project specification in workspace
          path: mozilla.app-services.json
          destination: dist/mozilla.app-services.json
      - store_artifacts:
          name: Store XCFramework bundle in workspace
          path: megazords/ios-rust/MozillaRustComponents.xcframework.zip
          destination: dist/MozillaRustComponents.xcframework.zip
      - run:
          name: "Carthage binary snapshot URL"
          command: |
            JSON_URL=https://circleci.com/api/v1.1/project/github/mozilla/application-services/$CIRCLE_BUILD_NUM/artifacts/0/dist/mozilla.app-services.json
            echo "Add the following line to your Cartfile:"
            echo "binary \"$JSON_URL\" ~> 0.0.1-snapshot # mozilla/application-services@$CIRCLE_SHA1"
      - run:
          name: "XCFramework bundle checksum"
          command: |
            shasum -a 256 ./megazords/ios-rust/MozillaRustComponents.xcframework.zip
            echo "Use the above checksum to depend on MozillaRustComponents.xcframework.zip as a Swift Package binary target"
      - persist_to_workspace:
          root: .
          paths:
            - MozillaAppServices.framework.zip
            - megazords/ios-rust/MozillaRustComponents.xcframework.zip
  Carthage release:
    executor: macos
    steps:
      - full-checkout
      - attach_workspace:
          at: .
      - run:
          name: Release Carthage archive on GitHub
          command: |
            GHR=ghr_v0.12.0_darwin_amd64
            GHR_SHA256=c868ef9fc5dd8c8a397b74d84051d83693c42dd59041cb17b66f90f563477249
            curl -sfSL --retry 5 --retry-delay 10 -O "https://github.com/tcnksm/ghr/releases/download/v0.12.0/${GHR}.zip"
            echo "${GHR_SHA256} *${GHR}.zip" | shasum -a 256 -c -
            unzip "${GHR}.zip"
            ./${GHR}/ghr -replace "${CIRCLE_TAG}" MozillaAppServices.framework.zip
  XCFramework release:
    executor: macos
    steps:
      - full-checkout
      - attach_workspace:
          at: .
      - run:
          name: Release XCFramework archive on GitHub
          command: |
            GHR=ghr_v0.12.0_darwin_amd64
            GHR_SHA256=c868ef9fc5dd8c8a397b74d84051d83693c42dd59041cb17b66f90f563477249
            curl -sfSL --retry 5 --retry-delay 10 -O "https://github.com/tcnksm/ghr/releases/download/v0.12.0/${GHR}.zip"
            echo "${GHR_SHA256} *${GHR}.zip" | shasum -a 256 -c -
            unzip "${GHR}.zip"
            ./${GHR}/ghr -replace "${CIRCLE_TAG}" megazords/ios-rust/MozillaRustComponents.xcframework.zip

workflows:
  version: 2
  swiftlint:
    jobs:
      - Check Swift formatting
  check-formatting:
    jobs:
      - Check Rust formatting
  clippy:
    jobs:
      - Lint Rust with clippy
  check-protobuf-uptodate:
    jobs:
      - Check Protobuf files are up-to-date
  check-dependencies:
    jobs:
      - Check Rust dependencies
  bash-lint:
    jobs:
      - Lint Bash scripts
  check-dependencies-periodically:
    jobs:
      - Check Rust dependencies
    triggers:
      - schedule:
          cron: "0 7 * * *"
          filters:
            branches:
              only:
                - main
  run-beta-tests-periodically:
    jobs:
      - Rust tests - beta
    triggers:
      - schedule:
          cron: "0 7 * * *"
          filters:
            branches:
              only:
                - main
  run-tests:
    jobs:
      - Rust tests
      - Rust benchmarks
  run-tests-min-supported-version:
    jobs:
      - Rust tests - min supported rust version
  coverage:
    jobs:
      - Generate code coverage
  ios-artifacts:
    jobs:
      - iOS build and test:
          filters: # required since `Release` has tag filters AND requires `Build`
            tags:
              only: /.*/
      - Carthage release:
          requires:
            - iOS build and test
          filters:
            branches:
              ignore: /.*/
            tags:
              only: /^v.*/
      - XCFramework release:
          requires:
            - iOS build and test
          filters:
            branches:
              ignore: /.*/
            tags:
              only: /^v.*/
