apply plugin: 'com.android.library'
apply plugin: 'org.mozilla.rust-android-gradle.rust-android'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'

android {
    compileSdkVersion 27

    defaultConfig {
        minSdkVersion rootProject.ext.build['minSdkVersion']
        targetSdkVersion rootProject.ext.build['targetSdkVersion']

        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            consumerProguardFiles "$rootDir/proguard-rules-consumer-jna.pro"
        }

        withoutLib {
            initWith release
        }
    }

    // Help folks debugging by including symbols in our native libraries.  Yes, this makes the
    // resulting AAR very large.  The Android ecosystem seems to be in flux around who is in charge
    // of stripping native binaries, but for now let's provide symbols and see how consumers react.
    packagingOptions {
        doNotStrip "**/*.so"
    }
}

configurations {
    withoutLib {
    }
}

afterEvaluate {
    android.sourceSets.debug.jniLibs.srcDirs = android.sourceSets.main.jniLibs.srcDirs
    android.sourceSets.release.jniLibs.srcDirs = android.sourceSets.main.jniLibs.srcDirs
    android.sourceSets.main.jniLibs.srcDirs = []
}

cargo {
    // The directory of the Cargo.toml to build.
    module = '../../../../fxa-client/ffi'

    // The Android NDK API level to target.
    apiLevel = 21

    // Where Cargo writes its outputs.
    targetDirectory = '../../../../target'

    libname = 'fxaclient_ffi'

    // The Cargo targets to invoke.  The mapping from short name to target
    // triple is defined by the `rust-android-gradle` plugin.
    targets = [
        'arm',
        'arm64',
        'x86',
    ]

    // Perform release builds (which should have debug info, due to
    // `debug = true` in Cargo.toml).
    profile = "release"

    exec = rootProject.ext.cargoExec
}

dependencies {
    implementation 'net.java.dev.jna:jna:4.5.2@aar'
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"
}

afterEvaluate {
    // The `cargoBuild` task isn't available until after evaluation.
    android.libraryVariants.all { variant ->
        def productFlavor = ""
        variant.productFlavors.each {
            productFlavor += "${it.name.capitalize()}"
        }
        def buildType = "${variant.buildType.name.capitalize()}"
        if (variant.buildType.name != 'withoutLib') {
            tasks["generate${productFlavor}${buildType}Assets"].dependsOn(tasks["cargoBuild"])
        }

        // TODO: For unit tests.
        // tasks["process${productFlavor}${buildType}UnitTestJavaRes"].dependsOn(tasks["cargoBuild"])
    }
}

apply from: "$rootDir/publish.gradle"
ext.configurePublish(
        'org.mozilla.fxaclient',
        'fxaclient',
        'Firefox Accounts client.',
        /* jnaForTestConfiguration= */ null,
        /* variantWithoutLib= */ 'androidWithoutLib',
)
