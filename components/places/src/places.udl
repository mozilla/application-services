/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/. */

[Wrapped]
typedef string Url;

namespace places {
    [Throws=PlacesError]
    PlacesApi places_api_new(string db_path);
};

enum ConnectionType {
    "ReadOnly",
    "ReadWrite",
    "Sync", // ideally we wouldn't need to expose this and should guard against it being used (it's internal only)
};

interface PlacesApi {
    [Throws=PlacesError]
    PlacesConnection new_connection(ConnectionType conn_type);
};

interface PlacesConnection {
    [Throws=PlacesError]
    HistoryMetadata? get_latest_history_metadata_for_url(Url url);

    [Throws=PlacesError]
    sequence<HistoryMetadata> get_history_metadata_between(i64 start, i64 end);

    [Throws=PlacesError]
    sequence<HistoryMetadata> get_history_metadata_since(i64 start);

    [Throws=PlacesError]
    sequence<HistoryMetadata> query_history_metadata(string query, i32 limit);

    [Throws=PlacesError]
    sequence<HistoryHighlight> get_history_highlights(HistoryHighlightWeights weights, i32 limit);

    [Throws=PlacesError]
    void note_history_metadata_observation(HistoryMetadataObservation data);

    [Throws=PlacesError]
    void metadata_delete(Url url, Url? referrer_url, string? search_term);

    [Throws=PlacesError]
    void metadata_delete_older_than(i64 older_than);
};

// Some kind of namespacing for uniffi would be ideal. Multiple udl/macro defns?
// Everything below is from the crate::storage::history_metadata module...

enum DocumentType {
     // A page that isn't described by any other more specific types.
    "Regular",
    // A media page.
    "Media",
};

// This is used as an "input" to the api.
dictionary HistoryMetadataObservation {
    string url;
    string? referrer_url = null;
    string? search_term = null;
    i32? view_time = null;
    DocumentType? document_type = null;
    string? title = null;
};

// This is what is returned.
dictionary HistoryMetadata {
    string url;
    string? title;
    string? preview_image_url;
    i64 created_at;
    i64 updated_at;
    i32 total_view_time;
    string? search_term;
    DocumentType document_type;
    string? referrer_url;
};

dictionary HistoryHighlightWeights {
    double view_time;
    double frequency;
};

dictionary HistoryHighlight {
    double score;
    i32 place_id;
    string url;
    string? title;
    string? preview_image_url;
};

// Exists just to convince uniffi to generate `liftSequence*` helpers!
dictionary Dummy {
    sequence<HistoryMetadata>? md;
};

[Error]
enum PlacesError {
    "UnexpectedPlacesException",
    "UrlParseFailed",
    "PlacesConnectionBusy",
    "OperationInterrupted",
    "BookmarksCorruption",
    "InvalidParent",
    "UnknownBookmarkItem",
    "UrlTooLong",
    "InvalidBookmarkUpdate",
    "CannotUpdateRoot",
    "InternalPanic",
};
