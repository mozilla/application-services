/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/. */

[Custom]
typedef string RsJsonObject;

namespace remote_settings {};

interface RemoteSettingsService {
    [Throws=RemoteSettingsError]
    constructor(string storage_dir, RemoteSettingsConfig2 config);

    [Throws=RemoteSettingsError]
    RemoteSettingsClient make_client(string collection_name);

    [Throws=RemoteSettingsError]
    sequence<string> sync();

    [Throws=RemoteSettingsError]
    void update_config(RemoteSettingsConfig2 config);
};

interface RemoteSettingsClient {
    string collection_name();
    sequence<RemoteSettingsRecord>? get_records(optional boolean sync_if_empty = false);
    record<string, RemoteSettingsRecord>? get_records_map(optional boolean sync_if_empty = false);

    [Throws=RemoteSettingsError]
    bytes get_attachment(string attachment_id);
};

dictionary RemoteSettingsConfig2 {
    RemoteSettingsServer? server = null;
    string? bucket_name = null;
};

[Enum]
interface RemoteSettingsServer {
    Prod();
    Stage();
    Dev();
    Custom(string url);
};

dictionary RemoteSettingsRecord {
    string id;
    u64 last_modified;
    boolean deleted;
    Attachment? attachment;
    RsJsonObject fields;
};

dictionary Attachment {
    string filename;
    string mimetype;
    string location;
    string hash;
    u64 size;
};

[Error]
interface RemoteSettingsError {
    Network(string reason);
    Backoff(u64 seconds);
    Other(string reason);
};

// Below here lies the old remote settings API.  The plan is to move consumers away from this then
// remove it.


dictionary RemoteSettingsConfig {
    string collection_name;
    string? bucket_name = null;
    string? server_url = null;
    RemoteSettingsServer? server = null;
};

dictionary RemoteSettingsResponse {
    sequence<RemoteSettingsRecord> records;
    u64 last_modified;
};

interface RemoteSettings {
    /// Construct a new Remote Settings client with the given configuration.
    [Throws=RemoteSettingsError]
    constructor(RemoteSettingsConfig remote_settings_config);

    /// Fetch all records for the configuration this client was initialized with.
    [Throws=RemoteSettingsError]
    RemoteSettingsResponse get_records();

    /// Fetch all records added to the server since the provided timestamp,
    /// using the configuration this client was initialized with.
    [Throws=RemoteSettingsError]
    RemoteSettingsResponse get_records_since(u64 timestamp);

    /// Download an attachment with the provided id to the provided path.
    [Throws=RemoteSettingsError]
    void download_attachment_to_path(string attachment_id, string path);
};
