namespace cirrus {};

[Error]
enum NimbusError {
    "InvalidPersistedData", "IOError",
    "JSONError", "EvaluationError", "InvalidExpression", "InvalidFraction",
    "TryFromSliceError", "EmptyRatiosError", "OutOfBoundsError","UrlParsingError",
    "UuidError", "InvalidExperimentFormat",
    "InvalidPath", "InternalError", "NoSuchExperiment", "NoSuchBranch",
    "DatabaseNotReady", "VersionParsingError", "TryFromIntError",
    "ParseIntError", "TransformParameterError", "CirrusError",
};

interface CirrusClient {
    [Throws=NimbusError]
    constructor(string app_context, optional sequence<string> coenrolling_feature_ids = []);

    // Handles an enrollment request string and returns an enrollment response string.
    [Throws=NimbusError]
    string handle_enrollment(string request);

    // Sets the experiments list in the CirrusClient's internal state.
    [Throws=NimbusError]
    void set_experiments(string experiments);
};