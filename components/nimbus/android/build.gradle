// =============================================
// We're doing something a bit weird here, so
// READ THIS CAREFULLY before editing this file.
// =============================================
//
// The aim here is to pre-package the Nimbus Kotlin code and publish it under
// `org.mozilla.appservices:nimbus` rather than `org.mozilla.experiments:nimbus`,
// and to make it depend on `org.mozilla.appservices:full-megazord` for the
// compiled Rust code.
//
// We expect consumers that want to use Nimbus and AppServices together, will
// use our re-packaged version rather than standalone Nimbus SDK.

apply plugin: 'com.android.library'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'


android {
    ndkVersion rootProject.ext.build.ndkVersion
    compileSdkVersion rootProject.ext.build.compileSdkVersion

    defaultConfig {
        minSdkVersion rootProject.ext.build['minSdkVersion']
        targetSdkVersion rootProject.ext.build['targetSdkVersion']

        buildConfigField("String", "LIBRARY_VERSION", "\"${rootProject.ext.library.version}\"")

        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            consumerProguardFiles "$rootDir/proguard-rules-consumer-jna.pro"
        }
    }

    // We don't have any source files of our own, we're re-packaging the ones
    // from the Nimbus repo (which is included as a submodule in our repo).
    sourceSets {
        main.java.srcDirs += "../../external/nimbus-sdk/android/src/main/java"
        test.java.srcDirs += "../../external/nimbus-sdk/android/src/test"
        test.resources.srcDirs += "$buildDir/rustJniLibs/desktop"
        test.resources.srcDirs += "${project(':full-megazord').buildDir}/rustJniLibs/desktop"
    }

    // This is required to support new AndroidX support libraries.
    // See mozilla-mobile/android-components#842
    compileOptions {
        sourceCompatibility 1.8
        targetCompatibility 1.8
    }

    tasks.withType(org.jetbrains.kotlin.gradle.tasks.KotlinCompile).all {
        kotlinOptions {
            jvmTarget = 1.8
        }
    }

    testOptions {
        unitTests.all {
            testLogging {
                showStandardStreams = true
            }

            maxHeapSize = "1024m"
        }

        unitTests {
            includeAndroidResources = true
        }
    }
}

configurations {
    // There's an interaction between Gradle's resolution of dependencies with different types
    // (@jar, @aar) for `implementation` and `testImplementation` and with Android Studio's built-in
    // JUnit test runner.  The runtime classpath in the built-in JUnit test runner gets the
    // dependency from the `implementation`, which is type @aar, and therefore the JNA dependency
    // doesn't provide the JNI dispatch libraries in the correct Java resource directories.  I think
    // what's happening is that @aar type in `implementation` resolves to the @jar type in
    // `testImplementation`, and that it wins the dependency resolution battle.
    //
    // A workaround is to add a new configuration which depends on the @jar type and to reference
    // the underlying JAR file directly in `testImplementation`.  This JAR file doesn't resolve to
    // the @aar type in `implementation`.  This works when invoked via `gradle`, but also sets the
    // correct runtime classpath when invoked with Android Studio's built-in JUnit test runner.
    // Success!
    jnaForTest
}

dependencies {
    jnaForTest "net.java.dev.jna:jna:$jna_version@jar"
    implementation "net.java.dev.jna:jna:$jna_version@aar"
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"

    // Unlike standard Nimbus which builds a standalone package, this version depends
    // on `:full-megazord` for the underlying native library. The full-megazord needs
    // to be configured to include the corresponding Nimbus FFI functions.
    implementation project(":native-support")
    api project(":full-megazord")

    // For reasons unknown, resolving the jnaForTest configuration directly
    // trips a nasty issue with the Android-Gradle plugin 3.2.1, like `Cannot
    // change attributes of configuration ':PROJECT:kapt' after it has been
    // resolved`.  I think that the configuration is being made a
    // super-configuration of the testImplementation and then the `.files` is
    // causing it to be resolved.  Cloning first dissociates the configuration,
    // avoiding other configurations from being resolved.  Tricky!
    testImplementation files(configurations.jnaForTest.copyRecursive().files)
    testImplementation 'junit:junit:4.12'
}


// We also do the binding generation here:
android.libraryVariants.all { variant ->
    def t = tasks.register("generate${variant.name.capitalize()}UniffiBindings", Exec) {
        workingDir project.rootDir
        commandLine 'cargo', 'uniffi-bindgen', 'generate', "${project.projectDir}/../src/nimbus.udl", '--language', 'kotlin', '--out-dir', "${buildDir}/generated/source/uniffi/${variant.name}/java"
    }
    variant.javaCompileProvider.get().dependsOn(t)
    def sourceSet = variant.sourceSets.find { it.name == variant.name }
    sourceSet.java.srcDir new File(buildDir, "generated/source/uniffi/${variant.name}/java")
}

evaluationDependsOn(":full-megazord")
afterEvaluate {
    // The `cargoBuild` task isn't available until after evaluation.
    android.libraryVariants.all { variant ->
        def productFlavor = ""
        variant.productFlavors.each {
            productFlavor += "${it.name.capitalize()}"
        }
        def buildType = "${variant.buildType.name.capitalize()}"
        tasks["merge${productFlavor}${buildType}JniLibFolders"].dependsOn(project(':full-megazord').tasks["cargoBuild"])

        // For unit tests.
        tasks["process${productFlavor}${buildType}UnitTestJavaRes"].dependsOn(project(':full-megazord').tasks["cargoBuild"])
    }
}

apply from: "$rootDir/publish.gradle"
ext.configurePublish()
