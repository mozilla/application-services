/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/. */

namespace logins {
    // We expose the crypto primitives on the namespace

    // Create a new, random, encryption key.
    [Throws=LoginsApiError]
    string create_key();

    // Decrypt an `EncryptedLogin` to a `Login`
    [Throws=LoginsApiError]
    Login decrypt_login(EncryptedLogin login, [ByRef]string encryption_key);

    // Encrypt a `Login` to an `EncryptedLogin`
    [Throws=LoginsApiError]
    EncryptedLogin encrypt_login(Login login, [ByRef]string encryption_key);

    // Decrypt an encrypted `string` to `SecureLoginFields`
    [Throws=LoginsApiError]
    SecureLoginFields decrypt_fields(string sec_fields, [ByRef]string encryption_key);

    // Encrypt `SecureLoginFields` to an encrypted `string`
    [Throws=LoginsApiError]
    string encrypt_fields(SecureLoginFields sec_fields, [ByRef]string encryption_key);

    // Create a "canary" string, which can be used to test if the encryption key is still valid for the logins data
    [Throws=LoginsApiError]
    string create_canary([ByRef]string text, [ByRef]string encryption_key);

    // Check that key is still valid using the output of `create_canary`.  `text` much match the text you initially passed to `create_canary()`
    [Throws=LoginsApiError]
    boolean check_canary([ByRef]string canary, [ByRef]string text, [ByRef]string encryption_key);
};

// The fields you can add or update.
dictionary LoginFields {
    string origin;
    string? http_realm;
    string? form_action_origin;
    string username_field;
    string password_field;
};

// Fields available only while the encryption key is known.
dictionary SecureLoginFields {
    string password;
    string username;
};

// Fields specific to database records
dictionary RecordFields {
    string id;
    i64 times_used;
    i64 time_created;
    i64 time_last_used;
    i64 time_password_changed;
};

// A login entry from the user, not linked to any database record.
// The add/update APIs input these, alongside an encryption key.
dictionary LoginEntry {
    LoginFields fields;
    SecureLoginFields sec_fields;
};

// A login stored in the database
dictionary Login {
    RecordFields record;
    LoginFields fields;
    SecureLoginFields sec_fields;
};

// An encrypted version of [Login].  This is what we return for all the "read"
// APIs - we never return the cleartext of encrypted fields.
dictionary EncryptedLogin {
    RecordFields record;
    LoginFields fields;
    string sec_fields; // ciphertext of a SecureLoginFields
};

// These are the errors returned by our public API.
[Error]
interface LoginsApiError {
    // The login data supplied is invalid. The reason will indicate what's wrong with it.
    InvalidRecord(string reason);

    // Asking to do something with a guid which doesn't exist.
    NoSuchRecord(string reason);

    // The encryption key supplied of the correct format, but not the correct key.
    IncorrectKey();

    // An operation was interrupted at the request of the consuming app.
    Interrupted(string reason);

    // Sync reported that authentication failed and the user should re-enter their FxA password.
    // TODO: remove this at the same time as remove the sync() method in favour of the SyncManager.
    SyncAuthInvalid(string reason);

    // something internal went wrong which doesn't have a public error value
    // because the consuming app can not reasonably take any action to resolve it.
    // The underlying error will have been logged and reported.
    // (ideally would just be `Unexpected`, but that would be a breaking change)
    UnexpectedLoginsApiError(string reason);
};


interface LoginStore {
    [Throws=LoginsApiError]
    constructor(string path);

    [Throws=LoginsApiError]
    EncryptedLogin add(LoginEntry login, [ByRef]string encryption_key);

    [Throws=LoginsApiError]
    EncryptedLogin update([ByRef] string id, LoginEntry login, [ByRef]string encryption_key);

    [Throws=LoginsApiError]
    EncryptedLogin add_or_update(LoginEntry login, [ByRef]string encryption_key);

    [Throws=LoginsApiError]
    boolean delete([ByRef] string id);

    [Throws=LoginsApiError]
    void wipe();

    [Throws=LoginsApiError]
    void wipe_local();

    [Throws=LoginsApiError, Self=ByArc]
    void reset();

    [Throws=LoginsApiError]
    void touch([ByRef] string id);

    [Throws=LoginsApiError]
    sequence<EncryptedLogin> list();

    [Throws=LoginsApiError]
    sequence<EncryptedLogin> get_by_base_domain([ByRef] string base_domain);

    [Throws=LoginsApiError]
    Login? find_login_to_update(LoginEntry look, [ByRef]string encryption_key);

    [Throws=LoginsApiError]
    EncryptedLogin? get([ByRef] string id);

    [Self=ByArc]
    void register_with_sync_manager();
};
