/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/. */

namespace logins {
    // We expose the crypto primitives on the namespace

    // Create a new, random, encryption key.
    [Throws=LoginsStorageError]
    string create_key();

    // Decrypt a string into an SecureLoginFields struct. This will be used to get the credentials
    // from a `Login` dict.
    [Throws=LoginsStorageError]
    SecureLoginFields decrypt_fields([ByRef]string ciphertext, [ByRef]string encryption_key);

    // Encrypt an SecureLoginFields struct into a string. This will be used only rarely, eg, when
    // putting together `Login` dicts to pass to `import_multiple`.
    [Throws=LoginsStorageError]
    string encrypt_fields([ByRef]SecureLoginFields fields, [ByRef]string encryption_key);

    // XXX - we still need some way to have a "canary" for the encryption_key - eg, to ensure
    // a given key is the correct key for the DB. `autofill` consumers do this by just encrypting
    // some arbitrary string and storing the ciphertext, and as the app starts and the ciphertext
    // is loaded, it checks the string decrypts.
    // However, we don't otherwise need encryption and decryption of arbitrary strings. An
    // alternative is we expose a specific `check_canary` or similar function, and we manage
    // storage of the strings etc in our meta table?
};

// The fields you can add or update.
dictionary LoginFields {
    string origin;
    string? http_realm;
    string? form_action_origin;
    string username_field;
    string password_field;
};

// What you can add or update. You must pass the cleartext of encrypted fields
// and the add/update APIs can encrypt (they need to know the key anyway)
dictionary LoginEntry {
    LoginFields fields;
    SecureLoginFields sec_fields;
};

// What we return for all the "read" APIs - we never return the cleartext
// of encrypted fields.
dictionary Login {
    string id;
    LoginFields fields;
    string sec_fields; // ciphertext of a SecureLoginFields
    i64 times_used;
    i64 time_created;
    i64 time_last_used;
    i64 time_password_changed;
};

// Fields available only while the encryption key is known.
dictionary SecureLoginFields {
    string password;
    string username;
};

[Error]
enum LoginsStorageError {
    "UnexpectedLoginsStorageError",
    "SyncAuthInvalid",
    "MismatchedLock",
    "NoSuchRecord",
    "InvalidRecord",
    "CryptoError",
    "InvalidKey",
    "RequestFailed",
    "Interrupted",
};

interface LoginStore {
    [Throws=LoginsStorageError]
    constructor(string path);

    // XXX - Can we kill this, and just fix the semantics of add/update?
    [Throws=LoginsStorageError]
    void check_valid_with_no_dupes([ByRef] string id, [ByRef] LoginEntry login, [ByRef] string encryption_key);

    [Throws=LoginsStorageError]
    Login add(LoginEntry login, [ByRef]string encryption_key);

    [Throws=LoginsStorageError]
    Login update([ByRef] string id, LoginEntry login, [ByRef]string encryption_key);

    [Throws=LoginsStorageError]
    Login add_or_update(LoginEntry login, [ByRef]string encryption_key);

    [Throws=LoginsStorageError]
    boolean delete([ByRef] string id);

    [Throws=LoginsStorageError]
    void wipe();

    [Throws=LoginsStorageError]
    void wipe_local();

    [Throws=LoginsStorageError, Self=ByArc]
    void reset();

    [Throws=LoginsStorageError]
    void touch([ByRef] string id);

    [Throws=LoginsStorageError]
    sequence<Login> list();

    [Throws=LoginsStorageError]
    sequence<Login> get_by_base_domain([ByRef] string base_domain);

    [Throws=LoginsStorageError]
    string? find_existing(LoginEntry look, [ByRef]string encryption_key);

    // XXX - Can we kill this, and just fix the semantics of add/update?
    [Throws=LoginsStorageError]
    sequence<Login> potential_dupes_ignoring_username([ByRef]string id, LoginEntry login);

    [Throws=LoginsStorageError]
    Login? get([ByRef] string id);

    [Throws=LoginsStorageError]
    string import_multiple(sequence<Login> login, [ByRef]string encryption_key);

    [Self=ByArc]
    void register_with_sync_manager();

    [Throws=LoginsStorageError, Self=ByArc]
    string sync(string key_id, string access_token, string sync_key, string tokenserver_url, string local_encryption_key);
};
