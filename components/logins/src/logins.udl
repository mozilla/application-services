namespace logins {

    [Throws=LoginsStorageError]
    string open_and_get_salt(string path, [ByRef] string encryption_key);

    [Throws=LoginsStorageError]
    void open_and_migrate_to_plaintext_header(string path, [ByRef] string encryption_key, [ByRef] string salt);
};


// Converted from mozilla.appservices.logins.protobuf.rs
dictionary LoginRecord {
    string guid;
    string hostname;
    string password;
    string username;
    string? http_realm;
    string? form_submit_url;
    string username_field;
    string password_field;
    i64 times_used;
    i64 time_created;
    i64 time_last_used;
    i64 time_password_changed;
};

dictionary MigrationMetrics {
    MigrationPhaseMetrics fixup_phase;
    MigrationPhaseMetrics insert_phase;
    u64 num_processed;
    u64 num_succeeded;
    u64 num_failed;
    u64 total_duration;
    sequence<string> errors;
};

dictionary MigrationPhaseMetrics {
    u64 num_processed;
    u64 num_succeeded;
    u64 num_failed;
    u64 total_duration;
    sequence<string> errors;
};

[Error]
enum LoginsStorageError {
    "UnexpectedLoginsStorageError",
    "SyncAuthInvalid",
    "MismatchedLock",
    "NoSuchRecord",
    "IdCollision",
    "InvalidRecord",
    "InvalidKey",
    "RequestFailed",
    "Interrupted"
};

interface PasswordStore {
    [Throws=LoginsStorageError]
    constructor(string path, [ByRef] string encryption_key);

    [Name=new_with_salt, Throws=LoginsStorageError]
    constructor(string path, [ByRef] string encryption_key, [ByRef] string salt);

    [Throws=LoginsStorageError]
    void check_valid_with_no_dupes(LoginRecord record);

    [Throws=LoginsStorageError]
    string add(LoginRecord record);

    [Throws=LoginsStorageError]
    boolean delete([ByRef] string id);

    [Throws=LoginsStorageError]
    void wipe();
    [Throws=LoginsStorageError]
    void wipe_local();
    [Throws=LoginsStorageError]
    void reset();

    [Throws=LoginsStorageError]
    void disable_mem_security();

    [Throws=LoginsStorageError]
    void rekey_database([ByRef] string new_encryption_key);

    [Throws=LoginsStorageError]
    void touch([ByRef] string id);

    [Throws=LoginsStorageError]
    sequence<LoginRecord> list();

    [Throws=LoginsStorageError]
    sequence<LoginRecord> get_by_base_domain([ByRef] string base_domain);

    [Throws=LoginsStorageError]
    sequence<LoginRecord> potential_dupes_ignoring_username(LoginRecord record);

    [Throws=LoginsStorageError]
    LoginRecord? get([ByRef] string id);

    [Throws=LoginsStorageError]
    void update(LoginRecord record);

    [Throws=LoginsStorageError]
    MigrationMetrics import_multiple(sequence<LoginRecord> record);
};