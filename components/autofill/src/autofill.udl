namespace autofill {};

dictionary NewCreditCardFields {
    string cc_name;
    string cc_number;
    i64 cc_exp_month;
    i64 cc_exp_year;
    string cc_type;
};

dictionary CreditCard {
    string guid;
    string cc_name;
    string cc_number;
    i64 cc_exp_month;
    i64 cc_exp_year;
    string cc_type;
};

dictionary NewAddressFields {
    string given_name;
    string additional_name;
    string family_name;
    string organization;
    string street_address;
    string address_level3;
    string address_level2;
    string address_level1;
    string postal_code;
    string country;
    string tel;
    string email;
};

dictionary Address {
    string guid;
    string given_name;
    string additional_name;
    string family_name;
    string organization;
    string street_address;
    string address_level3;
    string address_level2;
    string address_level1;
    string postal_code;
    string country;
    string tel;
    string email;
};

[Error]
enum ErrorKind {
   "SqlError", "IoError", "InterruptedError", "IllegalDatabasePath", "Utf8Error"
};

interface Store {
    [Throws=ErrorKind]
    constructor(string dbpath);

    [Throws=ErrorKind]
    CreditCard add_credit_card(NewCreditCardFields a);

    [Throws=ErrorKind]
    CreditCard get_credit_card(string guid);

    [Throws=ErrorKind]
    sequence<CreditCard> get_all_credit_cards();

    [Throws=ErrorKind]
    void update_credit_card(CreditCard a);

    [Throws=ErrorKind]
    boolean delete_credit_card(string guid);

    [Throws=ErrorKind]
    void touch_credit_card(string guid);

    [Throws=ErrorKind]
    Address add_address(NewAddressFields a);

    [Throws=ErrorKind]
    Address get_address(string guid);

    [Throws=ErrorKind]
    sequence<Address> get_all_addresses();

    [Throws=ErrorKind]
    void update_address(Address a);

    [Throws=ErrorKind]
    boolean delete_address(string guid);

    [Throws=ErrorKind]
    void touch_address(string guid);
};
