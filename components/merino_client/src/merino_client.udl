namespace merino_client {

};

[Error]
interface MerinoClientError {
    BadUrl(string reason);
    FetchFailed(string reason, u16? status);
};

[Enum]
interface MerinoServer {
    Production();
    Stage();
    Custom(string url);
};

dictionary MerinoClientSettings {
    MerinoServer server;
    u64 session_duration_ms;
    sequence<string> client_variants = [];
    sequence<string> default_providers = [];
};

dictionary MerinoClientFetchOptions {
    sequence<string>? providers = null;
};

dictionary MerinoSuggestionDetails {
    string title;
    string url;
    boolean is_sponsored;
    f64 score;
    string? icon;
};

[Enum]
interface MerinoSuggestion {
    Adm(MerinoSuggestionDetails details, i64 block_id, string full_keyword, string advertiser, string? impression_url, string? click_url);
    TopPicks(MerinoSuggestionDetails details, i64 block_id, boolean is_top_pick);
    Other(MerinoSuggestionDetails details, string provider);
};

interface MerinoClient {
    [Name=for_server, Throws=MerinoClientError]
    constructor(MerinoServer server);

    [Throws=MerinoClientError]
    constructor(MerinoClientSettings settings);

    [Throws=MerinoClientError]
    sequence<MerinoSuggestion> fetch([ByRef] string query, optional MerinoClientFetchOptions? options = null);
};
