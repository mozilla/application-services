diff --git a/firefox-ios/Storage/Rust/RustFirefoxSuggest.swift b/firefox-ios/Storage/Rust/RustFirefoxSuggest.swift
index e12d428192..607e2aca20 100644
--- a/firefox-ios/Storage/Rust/RustFirefoxSuggest.swift
+++ b/firefox-ios/Storage/Rust/RustFirefoxSuggest.swift
@@ -4,7 +4,7 @@
 
 import Foundation
 
-import class MozillaAppServices.SuggestStore
+import class MozillaAppServices.SuggestStoreAsync
 import class MozillaAppServices.SuggestStoreBuilder
 import class MozillaAppServices.Viaduct
 import enum MozillaAppServices.SuggestionProvider
@@ -33,12 +33,7 @@
 /// Wraps the synchronous Rust `SuggestStore` binding to execute
 /// blocking operations on a dispatch queue.
 public class RustFirefoxSuggest: RustFirefoxSuggestProtocol {
-    private let store: SuggestStore
-
-    // Using a pair of serial queues lets read and write operations run
-    // without blocking one another.
-    private let writerQueue = DispatchQueue(label: "RustFirefoxSuggest.writer")
-    private let readerQueue = DispatchQueue(label: "RustFirefoxSuggest.reader")
+    private let store: SuggestStoreAsync
 
     public init(dataPath: String, cachePath: String, remoteSettingsConfig: RemoteSettingsConfig? = nil) throws {
         var builder = SuggestStoreBuilder()
@@ -49,24 +44,21 @@
             builder = builder.remoteSettingsConfig(config: remoteSettingsConfig)
         }
 
-        store = try builder.build()
+        store = try builder.buildAsync(
+            // Use .userInitiated QOS for most operations.  Methods like `query` should be executed
+            // ASAP.
+            workerQueue: DispatchQueue(label: "RustFirefoxSuggest.general", qos: .userInitiated),
+            // Use .utility QOS for ingest since latency is not important here.
+            // Also, using a separate queue allows `ingest()` and `query()` to run side-by-side.
+            ingestWorkerQueue: DispatchQueue(label: "RustFirefoxSuggest.ingest", qos: .utility)
+        )
     }
 
     public func ingest() async throws {
         // Ensure that the Rust networking stack has been initialized before
         // downloading new suggestions. This is safe to call multiple times.
         Viaduct.shared.useReqwestBackend()
-
-        try await withCheckedThrowingContinuation { continuation in
-            writerQueue.async(qos: .utility) {
-                do {
-                    try self.store.ingest(constraints: SuggestIngestionConstraints())
-                    continuation.resume()
-                } catch {
-                    continuation.resume(throwing: error)
-                }
-            }
-        }
+        return try await self.store.ingest(constraints: SuggestIngestionConstraints())
     }
 
     public func query(
@@ -74,24 +66,15 @@
         providers: [SuggestionProvider],
         limit: Int32
     ) async throws -> [RustFirefoxSuggestion] {
-        return try await withCheckedThrowingContinuation { continuation in
-            readerQueue.async(qos: .userInitiated) {
-                do {
-                    let suggestions = try self.store.query(query: SuggestionQuery(
-                        keyword: keyword,
-                        providers: providers,
-                        limit: limit
-                    )).compactMap(RustFirefoxSuggestion.init)
-                    continuation.resume(returning: suggestions)
-                } catch {
-                    continuation.resume(throwing: error)
-                }
-            }
-        }
+        return try await self.store.query(query: SuggestionQuery(
+            keyword: keyword,
+            providers: providers,
+            limit: limit
+        )).compactMap(RustFirefoxSuggestion.init)
     }
 
     public func interruptReader() {
-        store.interrupt()
+        store.interrupt(kind: .read)
     }
 
     public func interruptEverything() {
