apply plugin: 'com.android.library'
apply plugin: 'org.mozilla.rust-android-gradle.rust-android'

import com.sun.jna.Platform

android {
    compileSdkVersion 27

    defaultConfig {
        minSdkVersion rootProject.ext.build['minSdkVersion']
        targetSdkVersion rootProject.ext.build['targetSdkVersion']

        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }

    sourceSets {
        test.resources.srcDirs += "$buildDir/rustResources"
    }

    // Help folks debugging by including symbols in our native libraries.  Yes, this makes the
    // resulting AAR very large.  The Android ecosystem seems to be in flux around who is in charge
    // of stripping native binaries, but for now let's provide symbols and see how consumers react.
    packagingOptions {
        doNotStrip "**/*.so"
    }
}

cargo {
    // The directory of the Cargo.toml to build.
    module = '../..'

    // The Android NDK API level to target.
    apiLevel = 21

    // Where Cargo writes its outputs.
    targetDirectory = '../../../../target'

    libname = 'reference_browser'

    // The Cargo targets to invoke.  The mapping from short name to target
    // triple is defined by the `rust-android-gradle` plugin.
    targets = [
        'default',
        'arm',
        'arm64',
        'x86',
    ]

    // Perform release builds (which should have debug info, due to
    // `debug = true` in Cargo.toml).
    profile = "release"

    exec = rootProject.ext.cargoExec

    // For unit tests.
    // This puts the output of `cargo build` (the "default" toolchain) into the correct directory
    // for JNA to find it.
    defaultToolchainBuildPrefixDir = Platform.RESOURCE_PREFIX
}
