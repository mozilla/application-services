buildscript {
    ext.kotlin_version = '1.3.10'
    ext.plugin_version = '0.2.0'

    repositories {
        google()
        jcenter()
        maven {
            url "https://plugins.gradle.org/m2/"
        }
    }
    dependencies {
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
    }
}

plugins {
    id 'com.gradle.plugin-publish' version '0.10.0'
}

apply plugin: 'groovy' // For testing.
apply plugin: 'kotlin'
apply plugin: 'java-gradle-plugin'
apply plugin: 'maven-publish'

repositories {
    google()
    jcenter()
    maven {
        url "https://plugins.gradle.org/m2/"
    }
}

group 'org.mozilla.appservices'
version "$plugin_version"

gradlePlugin {
    plugins {
        appservices {
            id = 'org.mozilla.appservices'
            implementationClass = 'mozilla.appservices.AppServicesPlugin'
        }
    }
}

dependencies {
    compileOnly gradleApi()
    // This should really be compileOnly, but it's hard to get the Android classpath correct in the tests.
    // It will be more robust if it's compileOnly, 'cuz then we should use the version from the
    // consuming project's Android plugin.
    implementation 'com.android.tools.build:gradle:3.1.4'
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"

    testCompile('org.spockframework:spock-core:1.1-groovy-2.4') {
        exclude module: 'groovy-all'
    }
}

compileKotlin {
    kotlinOptions.jvmTarget = "1.8"
}

compileTestKotlin {
    kotlinOptions.jvmTarget = "1.8"
}

pluginBundle {
    website = 'https://github.com/mozilla/application-services/gradle-plugin'
    vcsUrl = 'https://github.com/mozilla/application-services.git'

    plugins {
        appservices {
            displayName = 'Plugin for consuming Mozilla Application Services megazord native libraries'
            description = 'A plugin that helps consume multiple Mozilla Application Services native libraries.'
            tags = ['rust', 'cargo', 'mozilla', 'appservices', 'android', 'megazord']
        }
    }
}

wrapper {
    distributionType = Wrapper.DistributionType.ALL
}
