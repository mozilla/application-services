apply plugin: 'com.android.library'
apply plugin: 'org.mozilla.rust-android-gradle.rust-android'
apply plugin: 'kotlin-android'

android {
    namespace 'org.mozilla.appservices.full_megazord'

    ndkVersion rootProject.ext.build.ndkVersion
    compileSdkVersion rootProject.ext.build.compileSdkVersion

    defaultConfig {
        minSdkVersion rootProject.ext.build['minSdkVersion']
        targetSdkVersion rootProject.ext.build['targetSdkVersion']

        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
        buildConfigField("String", "LIBRARY_VERSION", "\"${rootProject.ext.library.version}\"")
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            consumerProguardFiles "$rootDir/proguard-rules-consumer-jna.pro"
        }
    }

    // Uncomment to include debug symbols in native library builds.
    // packagingOptions { doNotStrip "**/*.so" }
}

kotlin {
    jvmToolchain(rootProject.ext.build.jvmTargetCompatibility)
}

// Configurations are a somewhat mysterious Gradle concept.  For our purposes, we can treat them
// sets of files produced by one component and consumed by another.
configurations {
    // Native megazord library, this is the one compatible with the user's local machine.  We use it
    // to run unit tests.
    consumable("megazordNative")
}

// Wrap the cargoBuild task to copy the native library to an output dir
//
// This allows it to be piped in to a Gradle configuration.
def cargoBuildNativeArtifacts = tasks.register("copyNativeMegazord", Copy) {
    from layout.buildDirectory.dir("rustJniLibs/desktop")
    into layout.buildDirectory.dir("nativeMegazord")

    def nativeTarget = rootProject.ext.nativeRustTarget
    dependsOn tasks["cargoBuild${nativeTarget.capitalize()}"]
}

artifacts {
    // Connect task output to configurations
    megazordNative(cargoBuildNativeArtifacts)
}

cargo {
    // The directory of the Cargo.toml to build.
    module = '..'

    // The Android NDK API level to target.
    apiLevel = rootProject.ext.build['minSdkVersion']

    // Where Cargo writes its outputs.
    targetDirectory = '../../../target'

    libname = 'megazord'

    // The Cargo targets to invoke.  The mapping from short name to target
    // triple is defined by the `rust-android-gradle` plugin.
    targets = rootProject.ext.rustTargets

    // Perform release builds (which should have debug info, due to
    // `debug = true` in Cargo.toml).
    profile = "release"

    exec = { spec, toolchain ->
        rootProject.ext.cargoExec(spec, toolchain)
        // Only used in the full megazord (that is, in this project) at build time.
        spec.environment("MEGAZORD_VERSION", rootProject.ext.library.version)
    }

    extraCargoBuildArguments = rootProject.ext.extraCargoBuildArguments
}

afterEvaluate {
    // The `cargoBuild` task isn't available until after evaluation.
    android.libraryVariants.all { variant ->
        def productFlavor = ""
        variant.productFlavors.each {
            productFlavor += "${it.name.capitalize()}"
        }
        def buildType = "${variant.buildType.name.capitalize()}"
        tasks["merge${productFlavor}${buildType}JniLibFolders"].dependsOn(tasks["cargoBuild"])
    }
}

apply from: "$rootDir/publish.gradle"
ext.configurePublish()
