apply plugin: 'com.android.library'
apply plugin: 'org.mozilla.rust-android-gradle.rust-android'

import com.sun.jna.Platform

android {
    compileSdkVersion 27

    defaultConfig {
        minSdkVersion rootProject.ext.build['minSdkVersion']
        targetSdkVersion rootProject.ext.build['targetSdkVersion']

        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            consumerProguardFiles "$rootDir/proguard-rules-consumer-jna.pro"
        }
    }

    sourceSets {
        test.resources.srcDirs += "$buildDir/rustJniLibs/desktop"
    }

    // Help folks debugging by including symbols in our native libraries.  Yes, this makes the
    // resulting AAR very large.  The Android ecosystem seems to be in flux around who is in charge
    // of stripping native binaries, but for now let's provide symbols and see how consumers react.
    packagingOptions {
        doNotStrip "**/*.so"
    }
}

configurations {
    // There's an interaction between Gradle's resolution of dependencies with different types
    // (@jar, @aar) for `implementation` and `testImplementation` and with Android Studio's built-in
    // JUnit test runner.  The runtime classpath in the built-in JUnit test runner gets the
    // dependency from the `implementation`, which is type @aar, and therefore the JNA dependency
    // doesn't provide the JNI dispatch libraries in the correct Java resource directories.  I think
    // what's happening is that @aar type in `implementation` resolves to the @jar type in
    // `testImplementation`, and that it wins the dependency resolution battle.
    //
    // A workaround is to add a new configuration which depends on the @jar type and to reference
    // the underlying JAR file directly in `testImplementation`.  This JAR file doesn't resolve to
    // the @aar type in `implementation`.  This works when invoked via `gradle`, but also sets the
    // correct runtime classpath when invoked with Android Studio's built-in JUnit test runner.
    // Success!
    jnaForTest
}

cargo {
    // The directory of the Cargo.toml to build.
    module = '..'

    // The Android NDK API level to target.
    apiLevel = 21

    // Where Cargo writes its outputs.
    targetDirectory = '../../../target'

    libname = 'reference_browser'

    // The Cargo targets to invoke.  The mapping from short name to target
    // triple is defined by the `rust-android-gradle` plugin.
    targets = [
        'linux-x86-64',
        'darwin',
        'win32-x86-64-gnu',
        'arm',
        'arm64',
        'x86',
    ]

    // Perform release builds (which should have debug info, due to
    // `debug = true` in Cargo.toml).
    profile = "release"

    exec = rootProject.ext.cargoExec
}

dependencies {
    api project(path: ':fxa-client-library', configuration: 'withoutLib')
    api project(path: ':logins-library', configuration: 'withoutLib')
    api project(path: ':places-library', configuration: 'withoutLib')

    jnaForTest 'net.java.dev.jna:jna:4.5.2@jar'
}

afterEvaluate {
    // The `cargoBuild` task isn't available until after evaluation.
    android.libraryVariants.all { variant ->
        def productFlavor = ""
        variant.productFlavors.each {
            productFlavor += "${it.name.capitalize()}"
        }
        def buildType = "${variant.buildType.name.capitalize()}"
        tasks["generate${productFlavor}${buildType}Assets"].dependsOn(tasks["cargoBuild"])

        // For unit tests.
        tasks["process${productFlavor}${buildType}UnitTestJavaRes"].dependsOn(tasks["cargoBuild"])
    }
}

apply from: "$rootDir/publish.gradle"
ext.configurePublish(
        'org.mozilla.appservices',
        'reference-browser-megazord',
        'Megazord of [fxaclient, logins, places]',
        /* jnaForTestConfiguration= */ configurations.jnaForTest,
        /* variantWithoutLib= */ null,
)
