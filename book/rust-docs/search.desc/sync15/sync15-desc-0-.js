searchState.loadedDescShard("sync15", 0, "Borrowed data.\nArgument to Store::prepare_for_sync. See comment there for …\nEnumeration for the different types of device.\nA representation of an encrypted payload. Used as the …\nContains the error value\nThis is a type intended to be used to represent the guids …\nContains the success value\nOwned data.\nInformation about a remote client in the clients …\nTypesafe way to manage server timestamps without …\nUsed for things like a node reassignment or an unexpected …\nGet the data backing this <code>Guid</code> as a <code>&amp;[u8]</code>.\nGet the milliseconds for the timestamp.\nGet the data backing this <code>Guid</code> as a <code>&amp;str</code>.\nA module for everything needed to be a “sync client” - …\nThe client engine is a crate::engine(Sync Engine) used to …\nDecrypt the provided ciphertext with the given iv, and …\nCreate a default guid by calling <code>Guid::empty()</code>\nReturns None if <code>other</code> is later than <code>self</code> (Duration may not …\nCreate an empty guid. Usable as a constant.\nGenerate a random iv and encrypt with it. Return both the …\nEncrypt using the provided IV.\nThis module is used by crates which need to implement a “…\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConvert <code>b</code> into a <code>Guid</code>.\nConvert <code>b</code> into a <code>Guid</code>.\nConvert <code>v</code> to a <code>Guid</code>, consuming it.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConvert this <code>Guid</code> into a <code>String</code>, consuming it in the …\nReturns true for Guids that are valid places guids, and …\nReturns true for Guids that are deemed valid by the sync …\nReturns true if the byte <code>b</code> is a valid base64url byte.\nCreate a guid from a <code>str</code>.\nConstruct a key bundle from the already-decoded encrypt …\nCreate a random guid (of 12 base64url characters). …\nA hashmap of records in the <code>clients</code> collection. Key is the …\nManage recording sync telemetry. Assumes some external …\nA good, live T.\nIncomingBso’s can come from:\nWe also have the concept of “content”, which helps …\nAn envelope for an incoming item. Envelopes carry all the …\nThe “kind” of incoming content after deserializing it.\nEither not JSON, or can’t be made into a T.\nAn envelope for an outgoing item. This is conceptually …\nA record that used to be a T but has been replaced with a …\nReturns Some(content) if [self.kind] is …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreate an Outgoing record with an explicit envelope. Will …\nCreates a outgoing record from some , which can be made …\nWhen a test has an T and wants it as an IncomingBso\nWhen a test has an T and wants it as an IncomingBso with a …\nThe ID of the record.\nThe ID of the record.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConvert an IncomingBso to an IncomingContent possibly …\nLike into_content, but adds an additional fixup step where …\nDecrypt a BSO, consuming it into a clear-text version.\nMost consumers will use <code>self.from_content</code> and …\nWhen a test wants a new incoming tombstone.\nCreates a new tombstone record. Not all collections expect …\nUtilities for tests to make IncomingBsos and Content from …\nWhen a test has an OutgoingBso and wants it as an …\nWhen a test has an OutgoingBso and wants it as an …\nWhen a test has an OutgoingBso and wants it as an …\nSome external FxA action needs to be taken.\nWe declined to do anything for backoff or rate-limiting …\nWe were interrupted.\nInfo we want callers to engine <em>in memory</em> for us so that …\nSome general network issue.\nEverything is fine.\nSomething else - you need to check the logs for more …\nSome apparent issue with the servers.\nThe general status of sync - should probably be moved to …\nA trait containing the methods required to run through the …\nA response from a GET request on a Sync15StorageClient, …\nThis is essentially a bag of information that the sync …\nThe result of a sync request. This too is from the “sync …\nThe set of declined engines, if we know them.\nThe result for each engine. Note that we expect the <code>String</code> …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe result of the sync.\nThe general health.\nSync multiple engines\nLike <code>sync_multiple</code>, but specifies an optional command …\nA command processor applies incoming commands like wipes …\nIndicates if a command was applied successfully, ignored, …\nResets local sync state for a specific engine.\nResets local sync state for all engines.\nInformation about this device to include in its client …\nErases all local data for a specific engine.\nApplies a command sent to this client from another client. …\nThe name of this client. This should match the client’s …\nThe type of this client: mobile, tablet, desktop, or other.\nFetches commands to send to other clients. An error return …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nThe FxA device ID of this client, also used as this client…\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreates a new clients engine that delegates to the given …\nSyncs the clients collection. This works a little …\nA BridgedEngine acts as a bridge between …\nSync is connected, and has the following sync IDs.\nThis store is disconnected (although it may be connected …\nDefines how an engine is associated with a particular set …\nA “sync engine” is a thing that knows how to sync. It…\nThe concrete <code>SyncEngine</code> implementations\nApplies all staged records, reconciling changes on both …\nApply the staged records, returning outgoing records. …\nEnsures that the locally stored sync ID for this engine’…\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nThe engine is responsible for building a single collection …\nGet persisted sync IDs. If they don’t match the global …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the last sync time, in milliseconds, for this …\nThe number of incoming records whose contents were merged …\nTells the tabs engine about recent FxA devices. A bit of a …\nTells the tabs engine about recent FxA devices. A bit of a …\nPrepares the engine for syncing. The tabs engine currently …\nPrepares the engine for syncing. The tabs engine currently …\nList of records\nResets all local Sync state, including any change flags, …\nReset the engine (and associated store) without wiping …\nResets the sync ID for this engine’s collection, …\nSets the last sync time, in milliseconds. This is called …\nTells the engine what the local encryption key is for the …\nTells the engine what the local encryption key is for the …\nIndicates that the given record IDs were uploaded …\nIndicates that the given record IDs were uploaded …\nStage some incoming records. This might be called multiple …\nStages a batch of incoming Sync records. This is called …\nIndicates that all records have been uploaded. At this …\nCalled once the sync is finished. Not currently called if …\nCalled once the sync is finished. Not currently called if …\nReturns the sync ID for this engine’s collection. This …\nIndicates that the engine is about to start syncing. This …\nErases all local user data for this collection, and any …\nWipes the engine’s data This is typically triggered by a …\nWipes the engine’s data This is typically triggered by a …\nOne engine’s sync.\nIncoming record for an engine’s sync\nOutgoing record for an engine’s sync.\nA generic “Event” - suitable for all kinds of pings …\nA Sync failure.\nA single sync. May have many engines, may have its own …\nThe Sync ping payload, as documented at …\nIncrement the value of <code>applied</code> by <code>n</code>.\nIncrement the value of <code>failed</code> by <code>n</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet the value of <code>applied</code>. Mostly useful for testing.\nGet the value of <code>failed</code>. Mostly useful for testing.\nGet the value of <code>new_failed</code>. Mostly useful for testing.\nGet the value of <code>reconciled</code>. Mostly useful for testing.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nIncrement the value of <code>new_failed</code> by <code>n</code>.\nIncrement the value of <code>reconciled</code> by <code>n</code>.")