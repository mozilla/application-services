searchState.loadedDescShard("nimbus_cli", 0, "Returns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nSend a complete JSON file to the Nimbus SDK and apply it …\nCapture the logs into a file.\nPrint the defaults for the manifest.\nEnroll into an experiment or a rollout.\nPrint the feature configuration involved in the branch of …\nFetch one or more named experiments and rollouts and put …\nFetch a list of experiments and put it in a file.\nExecute a nimbus-fml command. See\nDisplays information about an experiment\nList the experiments from a server\nPrint the state of the Nimbus database to logs.\nOpen the app without changing the state of experiment …\nReset the app back to its just installed state\nStart a server\nFollow the logs for the given app.\nConfigure an application feature with one or more feature …\nUnenroll from all experiments and rollouts\nValidate an experiment against a feature manifest\nThe app name according to Nimbus.\nThe channel according to Nimbus. This determines which app …\nOptional deeplink. If present, launch with this link.\nThe device id of the simulator, emulator or device.\nThe experiment slug, including the server and collection.\nAn optional file from which to get the experiment.\nAn optional file\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nAn optional manifest file\nAn optional file to dump experiments into.\nOptionally, add platform specific arguments to the adb or …\nAn optional patch file, used to patch feature …\nInstead of opening via adb or xcrun simctl, construct a …\nInstead of opening via adb or xcrun simctl, construct a …\nThe branch/tag/commit for the version of the manifest to …\nResets the app back to its initial state before launching\nA server slug e.g. preview, release, stage, stage/preview\nUse the v6 API to fetch the experiment recipes.\nUse remote settings to fetch the experiment recipe.\nAn optional version of the app. If present, constructs the …\nThe branch slug.\nThe branch of the experiment\nAn optional feature-id\nAn optional feature-id: if it exists in this branch, print …\nThe identifier of the feature to configure\nThe filename to be loaded into the SDK.\nThe file to put the logs.\nOne or more files containing a feature config for the …\nPrint out the features involved in this branch as in a …\nBy default, the app is terminated before sending the a …\nDon’t validate the feature config files before enrolling\nDon’t validate the feature config files before enrolling\nAn optional file to print the manifest defaults.\nAn optional file to print the output.\nThe file to download the recipes to.\nThe file to download the recipes to.\nAn optional file to print the output.\nAn optional patch file, used to patch feature …\nPreserves the original experiment bucketing\nKeeps existing enrollments and experiments before …\nKeeps existing enrollments and experiments before …\nPreserves the original experiment targeting\nThe recipe slugs, including server.\nOptional rollout slugs, including the server and …\nIf set, then merge the experimental configuration with the …\nConstruct a URL from the deeplink and the protocol object.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThis is the protocol that each app understands.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCheck the specifically crafted JSON file for this package …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\npad_major will keep the string as it is. If the minor …\npad_major_minor will zero pad the minor version if it is …\nThe following are dumb string manipulations to pad out a …")