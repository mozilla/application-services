searchState.loadedDescShard("viaduct", 0, "A single header. Headers have a name (case insensitive) …\nRepresents a header name that we know to be both valid and …\nA list of headers.\nIndicates an invalid header name. Note that we only emit …\nHTTP Methods.\nA response from the server.\nSet this request’s body.\nThe body of the response.\nClear this set of headers.\nAlias for <code>Request::new(Method::Delete, url)</code>, for …\nAdd all the headers in the provided iterator to this list …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet the value of the header with the provided name.\nAlias for <code>Request::new(Method::Get, url)</code>, for convenience.\nGet the value of the header with the provided name, and …\nGet the header object with the requested name. Usually, …\nAdd the provided header to the list of headers to send …\nAdd all the provided headers to the list of headers to …\nThe headers returned with this response.\nInsert or update a new header.\nInsert or update a header directly. Typically you will …\nInsert the provided header unless a header is already …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConvert this list of headers to a Vec\nReturns true if the status code is in the interval …\nReturns true if <code>len()</code> is zero.\nReturns true if the status code is in the interval …\nReturns true if the status code is in the interval …\nGet an iterator over the headers in no particular order.\nSet body to the result of serializing <code>val</code>, and, unless it …\nParse the body as JSON.\nReturns the number of headers.\nCreate a new header. In general you likely want to use …\nInitialize an empty list of headers.\nConstruct a new request to the given <code>url</code> using the given …\nAlias for <code>Request::new(Method::Patch, url)</code>, for …\nAlias for <code>Request::new(Method::Post, url)</code>, for convenience.\nAlias for <code>Request::new(Method::Put, url)</code>, for convenience.\nAppend the provided query parameters to the URL\nThe method used to request this response.\nReturns an <code>UnexpectedStatus</code> error if <code>self.is_success()</code> is …\nSet the query string of the URL. Note that …\nThe HTTP Status code of this response.\nA module containing constants for all HTTP status codes.\nGet the body as a string. Assumes UTF-8 encoding. Any …\nAdd all the headers in the provided iterator, unless any …\nGet the value of the header with the provided name, and …\nThe URL of this response.\nInitialize an empty list of headers backed by a vector …\nThis error is returned as the <code>Err</code> result from […\nNote: we return this if the server returns a bad URL with …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nNote: reqwest allows these only to be specified …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nIs it a 4xx error?\nIs it a 5xx error?\nIs it a 2xx status?")