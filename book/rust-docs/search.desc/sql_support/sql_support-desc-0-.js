searchState.loadedDescShard("sql_support", 0, "A crate with various sql/sqlcipher helpers.\nThis trait exists so that we can use these helpers on …\nLazily-loaded database with interruption support\nMaybeCached is a type that can be used to help abstract …\nHelper type for printing repeated strings more …\nrusqlite, in an attempt to save us from ourselves, needs a …\nClose the database if it’s open\nConsumes and commits an unchecked transaction.\nThe method you need to implement to opt in to all of this.\nReturns SQLITE_LIMIT_VARIABLE_NUMBER as read from an …\nHelper for the case where you have a <code>&amp;[impl ToSql]</code> of …\nA version of <code>each_chunk</code> for the case when the conversion …\nUtility to help perform batched updates, inserts, queries, …\nIn PRAGMA foo=‘bar’, <code>&#39;bar&#39;</code> must be a constant string …\nExecute all the provided statements.\nExecute all the provided statements.\nEquivalent to <code>Connection::execute</code> but caches the statement …\nEquivalent to <code>Connection::execute</code> but caches the statement …\nExecute a single statement.\nExecute a single statement.\nReturn true if a query returns any rows\nReturn true if a query returns any rows\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet the DB size in bytes\nGet the DB size in bytes\nInterrupt any in-progress queries\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nLock the database mutex and get a connection and interrupt …\nBegin a new unchecked transaction. Cannot be nested, but …\nCreate a new LazyDb\nGet a cached or uncached statement based on a flag.\nGet a cached or uncached statement based on a flag.\nExecute a query that returns a single result column, and …\nExecute a query that returns a single result column, and …\nEquivalent to <code>rusqlite::Connection::query_row_and_then</code> but …\nEquivalent to <code>rusqlite::Connection::query_row_and_then</code> but …\nHelper for when you’d like to get a <code>Vec&lt;T&gt;</code> of all the …\nHelper for when you’d like to get a <code>Vec&lt;T&gt;</code> of all the …\nHelper for when you’d like to get a <code>Vec&lt;T&gt;</code> of all the …\nHelper for when you’d like to get a <code>Vec&lt;T&gt;</code> of all the …\nLike <code>query_rows_and_then_cachable</code>, but works if you want a …\nLike <code>query_rows_and_then_cachable</code>, but works if you want a …\nSame as <code>query_rows_into</code>, but caches the stmt if possible.\nSame as <code>query_rows_into</code>, but caches the stmt if possible.\nConstruct a RepeatDisplay that will repeatedly call <code>fmt_one</code>…\nReturns a value that formats as <code>num_values</code> instances of …\nReturns a value that formats as <code>count</code> instances of <code>(?)</code> …\nReturns a value that formats as <code>count</code> instances of <code>?</code> …\nConsumes and rolls back an unchecked transaction.\nSet the value of the pragma on the main database. Returns …\nSet the value of the pragma on the main database. Returns …\nExecute a query that returns 0 or 1 result columns, …\nExecute a query that returns 0 or 1 result columns, …\nLike <code>query_row_and_then_cacheable</code> but returns None instead …\nLike <code>query_row_and_then_cacheable</code> but returns None instead …\nCaveat: This won’t actually get used most of the time, …\nCaveat: This won’t actually get used most of the time, …\nBegin <code>unchecked_transaction</code> with …\nBegin <code>unchecked_transaction</code> with …\nYou can call this function to add all sql functions …\nPrint the entire contents of an arbitrary query. A common …\nContains the error value\nContains the success value\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nAttempt to run all upgrades\nAttempt to run all upgrades up to a specific version.")