searchState.loadedDescShard("error_support", 0, "Application error reporting trait\nSpecifies how an “internal” error is converted to an …\nDescribes what error reporting action should be taken.\nA trait to define how errors are converted and reported.\nRe-export of the <code>backtrace</code> crate for use in macros and to …\nTell the application to log a breadcrumb\nCreate an ErrorHandling instance with an error conversion.\nHandle the specified “internal” error, taking any …\nAll the error boilerplate (okay, with a couple exceptions …\nDefine a set of conversions from external error types into …\nXXX - Most of this is now considered deprecated - only FxA …\nThe external error that should be returned.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturn how to handle our internal errors\nA procedural macro that exposes internal errors to …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nAdd logging to an ErrorHandling instance\nlog an info\nlog a warning\nRedact compact jwe string (Five base64 segments, separated …\nRedact a URL.\nAdd reporting to an ErrorHandling instance\nSend a breadcrumb to a Sentry-like error reporting system\nSend an error report to a Sentry-like error reporting …\nAdd reporting to an ErrorHandling instance and also log an …\nTell the application to report an error\nHow the error should be reported.\nLog a breadcrumb if we see an <code>Result::Err</code> value")