searchState.loadedDescShard("relevancy", 0, "Proposed API for the relevancy component (validation phase)\nResult enum for the public API\nContains the error value\nContains the error value\nErrors we use internally\nList of possible interests for a domain.  Domains can have …\nInterest metrics that we want to send to Glean as part of …\nVector storing a count value for each interest\nContains the success value\nContains the success value\nErrors we return via the public interface.\nA thread-safe wrapper around an SQLite connection to the …\nResult enum for internal functions\nInitializes probability distributions for any …\nSelects the optimal item (arm) to display to the user …\nUpdates the bandit model’s arm data based on user …\nClears the cached Beta distribution parameters for a given …\nClose any open resources (for example databases)\nDownload the interest data from remote settings if needed\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nRetrieves the data for a specific bandit and arm.\nRetrieves the Beta distribution parameters for a given …\nIngest top URLs to build the user’s interest vector.\nInterrupt any current database queries\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConstruct a new RelevancyStore\nCreates a new, empty <code>BanditCache</code>.\nAccesses the Suggest database in a transaction for reading.\nAccesses the Suggest database in a transaction for reading …\nCalculate score for a piece of categorized content based …\nThe same as before, but the top 2 interests are copied. …\nThe same as before, but the top 3 interests are copied.\nSimilarity between the user’s interest vector and an …\nGet the user’s interest vector directly.\nGiven a URL, extract the part of it that we want to use to …")