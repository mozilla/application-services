searchState.loadedDescShard("nss", 0, "Contains the error value\nContains the success value\nInitialize NSS. This only executes the initialization …\nUse this function to initialize NSS if you want to manage …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nECDSA verify operation\nSafe wrapper around PK11_CreateContextBySymKey that …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nAuthorize NSS key store against a user-provided primary …\nCheck weather a primary password has been set and NSS …\nRetrieve a key, identified by <code>name</code>, from the internal NSS …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.")