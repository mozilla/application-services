searchState.loadedDescShard("places", 0, "Returns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nRecords an accepted autocomplete match, recording the …\nA frecency score for this match.\nReturns the argument unchanged.\nReturns the argument unchanged.\nDefault search behaviors from Desktop: HISTORY, BOOKMARK, …\nThe favicon URL.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nSynchronously queries all providers for autocomplete …\nThe search string for this match.\nThe title of the autocompleted value, to show in the UI. …\nThe URL to open when the user confirms a match. This is …\nThe entry-point to the places API. This object gives …\nClose a connection to the database. If the connection is …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreate a new, or fetch an already open, PlacesApi backed …\nCreate a new, or fetch an already open, memory-based …\nOpen a connection to the database.\nFor uniffi we need to expose our <code>Arc</code> returning constructor …\nSynced item kinds. These are stored in …\nSynced item validity states. These are stored in …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nErases all local items. Unlike <code>reset</code>, this keeps all …\nA bookmark record ID. Bookmark record IDs are the same as …\nReturns a reference to the GUID for this record ID.\nReturns a reference to the record payload ID. This is the …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreates a bookmark record ID from a Sync record payload ID.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the record payload ID. This is the owned version of\nHigh level transaction type which “does the right thing…\nConsumes and commits a PlacesTransaction transaction.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nFor transactions on sync connections: Checks to see if we …\nConsumes and attempst to roll back a PlacesTransaction. …\nReturns <code>true</code> if the current transaction should be …\nAn object that can tell you whether a bookmark changing …\nA scope guard that sets a Boolean PRAGMA to a new value, …\nPlacesDB that’s behind a Mutex so it can be shared …\nBegin the “correct” transaction type for this …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns an object that can tell you whether any changes …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nContains the error value\nContains the error value\nError enum used internally\nAttempt to create/update/delete a bookmark item in an …\nContains the success value\nContains the success value\nThrown when providing a guid to a create or update function\nThrown for invalid URLs\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nIn desktop sync, bookmarks are clamped to Jan 23, 1993 …\nThis is a type intended to be used to represent the guids …\nInterrupt operations that use SQL\nA parsed URL record.\nAdd an observation to the database.\nGet the data backing this <code>Guid</code> as a <code>&amp;[u8]</code>.\nGet the data backing this <code>Guid</code> as a <code>&amp;str</code>.\nReturn the serialization of this URL.\nReturn the authority of this URL as an ASCII string.\nBegin an interrupt scope that will be interrupted by this …\nReturn whether this URL is a cannot-be-a-base URL, meaning …\nCreate a default guid by calling <code>Guid::empty()</code>\nSerialize with Serde using the internal representation of …\nIf this URL has a host and it is a domain name (not an IP …\nReturns None if <code>other</code> is later than <code>self</code> (Duration may not …\nCreate an empty guid. Usable as a constant.\nReturn this URL’s fragment identifier, if any.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConvert a directory name as <code>std::path::Path</code> into an URL in …\nConvert a file name as <code>std::path::Path</code> into an URL in the …\nConvert <code>b</code> into a <code>Guid</code>.\nConvert <code>b</code> into a <code>Guid</code>.\nConvert <code>v</code> to a <code>Guid</code>, consuming it.\nReturn whether the URL has an ‘authority’, which can …\nEquivalent to <code>url.host().is_some()</code>.\nReturn the parsed representation of the host for this URL. …\nReturn the string representation of the host (domain or IP …\nInterrupt all interrupt scopes created by this handle\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConvert this <code>Guid</code> into a <code>String</code>, consuming it in the …\nReturn the serialization of this URL.\nReturn whether the URL is special (has a special scheme)\nReturns true for Guids that are valid places guids, and …\nReturns true for Guids that are deemed valid by the sync …\nReturns true if the byte <code>b</code> is a valid base64url byte.\nParse a string as an URL, with this URL as the base URL.\nCreates a relative URL if possible, with this URL as the …\nCreate a guid from a <code>str</code>.\nReturn a default <code>ParseOptions</code> that can fully configure the …\nReturn the origin of this URL (…\nParse an absolute URL from a string.\nParse an absolute URL from a string and add params to its …\nReturn the password for this URL, if any, as a …\nReturn the path for this URL, as a percent-encoded ASCII …\nUnless this URL is cannot-be-a-base, return an iterator of …\nReturn an object with methods to manipulate this URL’s …\nReturn the port number for this URL, if any.\nReturn the port number for this URL, or the default port …\nReturn this URL’s query string, if any, as a …\nParse the URL’s query string, if any, as …\nManipulate this URL’s query string, viewed as a sequence …\nCreate a random guid (of 12 base64url characters). …\nReturn the scheme of this URL, lower-cased, as an ASCII …\nSerialize with Serde using the internal representation of …\nChange this URL’s fragment identifier.\nChange this URL’s host.\nChange this URL’s host to the given IP address.\nChange this URL’s password.\nChange this URL’s path.\nChange this URL’s port number.\nChange this URL’s query string. If <code>query</code> is <code>None</code>, this …\nChange this URL’s scheme.\nChange this URL’s username.\nResolve a URL’s host and port number to <code>SocketAddr</code>.\nAssuming the URL is in the <code>file</code> scheme or similar, convert …\nReturn the username for this URL (typically the empty …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nEquivalent to <code>&quot;prefix_hi&quot;</code> in mozilla::places::HashURL\nEquivalent to <code>&quot;prefix_lo&quot;</code> in mozilla::places::HashURL\nReturns the argument unchanged.\nThis should return identical results to <code>mozilla::HashString</code>…\nThis should be identical to the “real” …\nThis should be identical to the “real” …\nCalls <code>U::from(self)</code>.\nVisit timestamps on the server are <em>microseconds</em> since the …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nWe use/abuse the mirror to perform our import, but need to …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThis import is used for iOS users migrating from <code>browser.db</code>…\nMatch anywhere in each searchable term without doing any …\nSearch through bookmarks.\nMatch only the beginning of each search term.\nMatch only the beginning of each search term using a case …\nMatch on word boundaries in each searchable term.\nMatch first on word boundaries, and if we do not get …\nSearch through history.\nSearch for javascript: urls\nSearch for open pages (currently not meaningfully …\nUse intersection between history, typed, bookmark, tag and …\nInclude search suggestions from the currently selected …\nSearch through tags.\nSearch through the title of pages.\nSearch for typed pages\nSearch the URL of pages.\nReturns the set containing all flags.\nReturns the intersection between the two sets of flags.\nDisables all flags disabled in the set.\nReturns the union of the two sets of flags.\nAdds the set of flags.\nReturns the raw value of the flags currently stored.\nReturns the left flags, but with all the right flags …\nToggles the set of flags.\nReturns the complement of this set of flags.\nReturns <code>true</code> if all of the flags in <code>other</code> are contained …\nReturns the difference between the flags in <code>self</code> and <code>other</code>.\nReturns an empty set of flags.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConvert from underlying bit representation, unless that …\nConvert from underlying bit representation, dropping any …\nConvert from underlying bit representation, preserving all …\nInserts the specified flags in-place.\nReturns the intersection between the flags in <code>self</code> and …\nReturns <code>true</code> if there are flags common to both <code>self</code> and …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns <code>true</code> if all flags are currently set.\nReturns <code>true</code> if no flags are currently stored.\nReturns the complement of this set of flags.\nRemoves the specified flags in-place.\nInserts or removes the specified flags depending on the …\nReturns the set difference of the two sets of flags.\nDisables all flags enabled in the set.\nReturns the symmetric difference between the flags in <code>self</code> …\nToggles the specified flags in-place.\nReturns the union of between the flags in <code>self</code> and <code>other</code>.\nAn “observation” based model for updating history. You …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nFrom …\nDelete all items in the temp tables we use for staging …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nRun maintenance on the places DB (checkpoint step)\nRun maintenance on the places DB (optimize step)\nRun maintenance on the places DB (prune step)\nRun maintenance on the places DB (vacuum step)\nSpecial GUIDs associated with bookmark roots. It’s …\nWe don’t require bookmark type for updates on the other …\nStructures which can be used to insert a bookmark, folder …\nStructures which can be used to update a bookmark, folder …\nSupport for modifying bookmarks, including changing the …\nGet the URL of the bookmark matching a keyword\nDelete the specified bookmark. Returns true if a bookmark …\nErases all bookmarks and resets all Sync metadata.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe functions exposed over the FFI use the same type for …\nSets up the syncable roots. All items in …\nStructs we return when reading bookmarks\nThis is similar to fetch_tree, but does not recursively …\nCall fetch_tree_with_depth with FetchDepth::Deepest. This …\nCall fetch_tree with a depth parameter and convert the …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nFetch the tree starting at the specified guid. Returns a …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the RowId of a new visit in moz_historyvisits, or …\nReturns the RowId of a new visit in moz_historyvisits, or …\nDelete all visits in a date range.\nDeletes all visits for a page given its GUID, creating …\nIndicates if and when a URL’s frecency was marked as …\nLow level api used to implement both get_visited and the …\nGet the set of urls that were visited between <code>start</code> and <code>end</code>…\nReturns the GUID for the specified Url String, or None if …\nReturns the GUID for the specified Url, or None if it doesn…\nApply history visit from sync. This assumes they have all …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nDelete all metadata for the specified place id.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe tag is invalid.\nThe tag is valid, but normalized to remove leading and …\nThe original tag is valid.\nThe validity of a tag.\nReturns the tag string if the tag is valid or normalized, …\nReturns the argument unchanged.\nRetrieves a list of tags for the specified URL.\nRetrieves a list of URLs which have the specified tag.\nCalls <code>U::from(self)</code>.\nReturns <code>true</code> if the original tag is valid; <code>false</code> if it’s …\nRemove all tags from the specified URL.\nRemove the specified tag from all URLs.\nTags the specified URL.\nRemove the specified tag from the specified URL.\nChecks the validity of the specified tag.\nBookmark types.\nRe SyncStatus - note that:\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.")