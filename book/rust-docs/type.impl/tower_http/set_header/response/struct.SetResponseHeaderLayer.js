(function() {var type_impls = {
"nimbus_cli":[["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Clone-for-SetResponseHeaderLayer%3CM%3E\" class=\"impl\"><a href=\"#impl-Clone-for-SetResponseHeaderLayer%3CM%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;M&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.79.0/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a> for SetResponseHeaderLayer&lt;M&gt;<div class=\"where\">where\n    M: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.79.0/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.clone\" class=\"method trait-impl\"><a href=\"#method.clone\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.79.0/core/clone/trait.Clone.html#tymethod.clone\" class=\"fn\">clone</a>(&amp;self) -&gt; SetResponseHeaderLayer&lt;M&gt;</h4></section></summary><div class='docblock'>Returns a copy of the value. <a href=\"https://doc.rust-lang.org/1.79.0/core/clone/trait.Clone.html#tymethod.clone\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.clone_from\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.79.0/src/core/clone.rs.html#169\">source</a></span><a href=\"#method.clone_from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.79.0/core/clone/trait.Clone.html#method.clone_from\" class=\"fn\">clone_from</a>(&amp;mut self, source: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.79.0/std/primitive.reference.html\">&amp;Self</a>)</h4></section></summary><div class='docblock'>Performs copy-assignment from <code>source</code>. <a href=\"https://doc.rust-lang.org/1.79.0/core/clone/trait.Clone.html#method.clone_from\">Read more</a></div></details></div></details>","Clone","nimbus_cli::output::server::Srhl"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Debug-for-SetResponseHeaderLayer%3CM%3E\" class=\"impl\"><a href=\"#impl-Debug-for-SetResponseHeaderLayer%3CM%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;M&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.79.0/core/fmt/trait.Debug.html\" title=\"trait core::fmt::Debug\">Debug</a> for SetResponseHeaderLayer&lt;M&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.fmt\" class=\"method trait-impl\"><a href=\"#method.fmt\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.79.0/core/fmt/trait.Debug.html#tymethod.fmt\" class=\"fn\">fmt</a>(&amp;self, f: &amp;mut <a class=\"struct\" href=\"https://doc.rust-lang.org/1.79.0/core/fmt/struct.Formatter.html\" title=\"struct core::fmt::Formatter\">Formatter</a>&lt;'_&gt;) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.79.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.79.0/std/primitive.unit.html\">()</a>, <a class=\"struct\" href=\"https://doc.rust-lang.org/1.79.0/core/fmt/struct.Error.html\" title=\"struct core::fmt::Error\">Error</a>&gt;</h4></section></summary><div class='docblock'>Formats the value using the given formatter. <a href=\"https://doc.rust-lang.org/1.79.0/core/fmt/trait.Debug.html#tymethod.fmt\">Read more</a></div></details></div></details>","Debug","nimbus_cli::output::server::Srhl"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Layer%3CS%3E-for-SetResponseHeaderLayer%3CM%3E\" class=\"impl\"><a href=\"#impl-Layer%3CS%3E-for-SetResponseHeaderLayer%3CM%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;S, M&gt; Layer&lt;S&gt; for SetResponseHeaderLayer&lt;M&gt;<div class=\"where\">where\n    M: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.79.0/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Service\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Service\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a class=\"associatedtype\">Service</a> = SetResponseHeader&lt;S, M&gt;</h4></section></summary><div class='docblock'>The wrapped service</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.layer\" class=\"method trait-impl\"><a href=\"#method.layer\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">layer</a>(&amp;self, inner: S) -&gt; &lt;SetResponseHeaderLayer&lt;M&gt; as Layer&lt;S&gt;&gt;::Service</h4></section></summary><div class='docblock'>Wrap the given service with the middleware, returning a new service\nthat has been decorated with the middleware.</div></details></div></details>","Layer<S>","nimbus_cli::output::server::Srhl"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-SetResponseHeaderLayer%3CM%3E\" class=\"impl\"><a href=\"#impl-SetResponseHeaderLayer%3CM%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;M&gt; SetResponseHeaderLayer&lt;M&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.overriding\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">overriding</a>(header_name: <a class=\"struct\" href=\"https://docs.rs/http/0.2.9/http/header/name/struct.HeaderName.html\" title=\"struct http::header::name::HeaderName\">HeaderName</a>, make: M) -&gt; SetResponseHeaderLayer&lt;M&gt;</h4></section></summary><div class=\"docblock\"><p>Create a new [<code>SetResponseHeaderLayer</code>].</p>\n<p>If a previous value exists for the same header, it is removed and replaced with the new\nheader value.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.appending\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">appending</a>(header_name: <a class=\"struct\" href=\"https://docs.rs/http/0.2.9/http/header/name/struct.HeaderName.html\" title=\"struct http::header::name::HeaderName\">HeaderName</a>, make: M) -&gt; SetResponseHeaderLayer&lt;M&gt;</h4></section></summary><div class=\"docblock\"><p>Create a new [<code>SetResponseHeaderLayer</code>].</p>\n<p>The new header is always added, preserving any existing values. If previous values exist,\nthe header will have multiple values.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.if_not_present\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">if_not_present</a>(\n    header_name: <a class=\"struct\" href=\"https://docs.rs/http/0.2.9/http/header/name/struct.HeaderName.html\" title=\"struct http::header::name::HeaderName\">HeaderName</a>,\n    make: M\n) -&gt; SetResponseHeaderLayer&lt;M&gt;</h4></section></summary><div class=\"docblock\"><p>Create a new [<code>SetResponseHeaderLayer</code>].</p>\n<p>If a previous value exists for the header, the new value is not inserted.</p>\n</div></details></div></details>",0,"nimbus_cli::output::server::Srhl"]]
};if (window.register_type_impls) {window.register_type_impls(type_impls);} else {window.pending_type_impls = type_impls;}})()